const express = require('express');
const router = express.Router();
const Employee = require('../model/Employee');
const Company = require('../model/Company');
// const { body,validationResult } = require('express-validator');
// const jwt = require("jsonwebtoken");
// const bcrypt = require("bcryptjs");
// const jwtSecure = "Mynameiskpandyoutube!!!##"; // secure key 

router.post("/createcompany",async(req,res)=>{
    console.log(global.company);
    // Check if global.company is available
    if (!global.company) {
        alert('Company data is not available');
        return;
    }

    // Check if the email already exists in the company data
    const emailExists = global.company.some(company => company.email === req.body.email);
    if (emailExists) {
        res.status(500).json({success:false});
        return;
    }
    // const salt = await bcrypt.genSalt(10); // random key generated by bcrypt
    // const secPassword = await bcrypt.hash(req.body.password,salt); // encrypting password with bcrypt
    try{
        // const error = validationResult(req);
        // if(!error.isEmpty()){
        //     return res.status(400).json({ error: error.array() });
        // }
        await Company.create({
            company_name: req.body.company_name ,
            director_name: req.body.director_name ,
            email: req.body.email,
            password:req.body.password ,
            description: req.body.description,
            technologies:req.body.technologies ,
            number_of_projects: req.body.number_of_projects, 
            number_of_employees: req.body.number_of_employees,
            city: req.body.city,
            location:req.body.location
        })
        res.status(200).json({success:true});
    }catch(error){
        console.log(error)
        res.json({success:false});
    }
})

router.post("/createemployee",async(req,res)=>{
    
    if (!global.employee) {
        alert('Company data is not available');
        return;
    }

    // Check if the email already exists in the company data
    const emailExists = global.employee.some(employee => employee.email === req.body.email);
    if (emailExists) {
        res.status(500).json({success:false});
        return;
    }
    
    // const salt = await bcrypt.genSalt(10); // random key generated by bcrypt
    // const secPassword = await bcrypt.hash(req.body.password,salt); // encrypting password with bcrypt
    try{
        // const error = validationResult(req);
        // if(!error.isEmpty()){
        //     return res.status(400).json({ error: error.array() });
        // }
        const newEmployee = {
            name: req.body.name,
            email: req.body.email,
            contact: req.body.contact,
            password: req.body.password,
            technologies: req.body.technologies,
            skills: req.body.skills,
            link: req.body.link,
            Education: req.body.Education ? req.body.Education : [], // Handle potential missing data
            Experience: req.body.Experience ? req.body.Experience : [], // Handle potential missing data
          };
          
          await Employee.create(newEmployee);
        
        res.json({success:true});
    }catch(error){
        console.log(error)
        res.json({success:false});
    }
})

router.post("/loginEmployee",async(req,res)=>{
    // const error = validationResult(req);
    //     if(!error.isEmpty()){
    //         return res.status(400).json({ error: error.array() });
    //     }

    let email = req.body.email;
    let password = req.body.password;
    try{
        let userData = await Employee.findOne({email});
        if(!userData)
        {
            return res.status(400).json({ error: "enter valid email!!" });
        }
        // const pwdCompare = await bcrypt.compare(password,userData.password); // compairing entered password with the stored encrypted password using bcrypt compare algorithms.
        if(password !== userData.password)
        {
            return res.status(400).json({ error: "enter valid password!!" });
        }

        // const Data = {
        //     user:{
        //         id: userData.id
        //     }
        // }
        // const authToken = jwt.sign(Data,jwtSecure); // Generating authToken using the user id and jwtSecure key user doesn't know about secure key.
        res.json({success:true});
    }catch(error){
        console.log(error)
        res.json({success:false});
    }
})

router.post("/loginCompany",async(req,res)=>{
    // const error = validationResult(req);
    //     if(!error.isEmpty()){
    //         return res.status(400).json({ error: error.array() });
    //     }

    let email = req.body.email;
    let password = req.body.password;
    try{
        let userData = await Company.findOne({email});
        if(!userData)
        {
            return res.status(400).json({ error: "enter valid email!!" });
        }
        // const pwdCompare = await bcrypt.compare(password,userData.password); // compairing entered password with the stored encrypted password using bcrypt compare algorithms.
        if(password !== userData.password)
        {
            return res.status(400).json({ error: "enter valid password!!" });
        }

        // const Data = {
        //     user:{
        //         id: userData.id
        //     }
        // }
        // const authToken = jwt.sign(Data,jwtSecure); // Generating authToken using the user id and jwtSecure key user doesn't know about secure key.
        res.json({success:true});
    }catch(error){
        console.log(error)
        res.json({success:false});
    }
})

router.get('/:id', async (req, res) => {
    const companyId = req.params.id;
    try {
        const companyDetails = await Company.findById(companyId);
        if (!companyDetails) {
            return res.status(404).json({ message: 'Company not found.' });
        }
        res.status(200).json(companyDetails);
    } catch (error) {
        console.error('Error fetching company details:', error);
        res.status(500).json({ message: 'An error occurred while fetching company details.' });
    }
})

router.get('/emp/:id', async (req, res) => {
    const employeeId = req.params.id;
    try {
        const employeeDetails = await Employee.findById(employeeId);
        if (!employeeDetails) {
            return res.status(404).json({ message: 'Employee not found.' });
        }
        res.status(200).json(employeeDetails);
    } catch (error) {
        console.error('Error fetching company details:', error);
        res.status(500).json({ message: 'An error occurred while fetching company details.' });
    }
})


module.exports = router;